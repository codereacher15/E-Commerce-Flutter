import 'product.dart';
import 'dart:convert';
import 'package:flutter/material.dart';
import '../models/http_Exception.dart';
import 'package:http/http.dart' as http;

class Products with ChangeNotifier {
  List<Product> _items = [
    Product(
      id: 'p1',
      title: 'Red Shirt',
      description: 'A red shirt - it is pretty red!',
      price: 29.99,
      imageUrl:
          'https://cdn.pixabay.com/photo/2016/10/02/22/17/red-t-shirt-1710578_1280.jpg',
    ),
    Product(
      id: 'p2',
      title: 'Trousers',
      description: 'A nice pair of trousers.',
      price: 59.99,
      imageUrl:
          'https://upload.wikimedia.org/wikipedia/commons/thumb/e/e8/Trousers%2C_dress_%28AM_1960.022-8%29.jpg/512px-Trousers%2C_dress_%28AM_1960.022-8%29.jpg',
    ),
    Product(
      id: 'p3',
      title: 'Yellow Scarf',
      description: 'Warm and cozy - exactly what you need for the winter.',
      price: 19.99,
      imageUrl:
          'https://live.staticflickr.com/4043/4438260868_cc79b3369d_z.jpg',
    ),
    Product(
      id: 'p4',
      title: 'A Pan',
      description: 'Prepare any meal you want.',
      price: 49.99,
      imageUrl:
          'https://upload.wikimedia.org/wikipedia/commons/thumb/1/14/Cast-Iron-Pan.jpg/1024px-Cast-Iron-Pan.jpg',
    ),
  ];
  //for favorites screen
  //to show only items marked favorite->true
  //var _showfavorites = false;

  List get getItem {
    //   if (_showfavorites) {
    //     //to return only favorite item
    //     return _items.where((prod) => prod.isfavorite).toList();
    //   }
    return [..._items];
  }

  List get getFav {
    return _items.where((prod) => prod.isfavorite).toList();
  }

  //setter method for showfavorite
  // void showFavorites() {
  //   _showfavorites = true;
  //   notifyListeners();
  // }

  // void showAll() {
  //   _showfavorites = false;
  //   notifyListeners();
  // }
  Future<void> fetchandSet() async {
    final url = Uri.https(
        'flutter-29634-default-rtdb.firebaseio.com', '/products.json');
    try {
      final response = await http.get(url);
      final extractedData = json.decode(response.body) as Map<String, dynamic>;
      final List<Product> loadedProd = [];
      extractedData.forEach((prodId, prodData) {
        loadedProd.add(
          Product(
              id: prodId,
              title: prodData['title'],
              description: prodData['description'],
              imageUrl: prodData['imageUrl'],
              price: prodData['price'],
              isfavorite: prodData['isfavorite']),
        );
        _items = loadedProd;
        notifyListeners();
      });
    } catch (error) {
      throw (error);
    }
  }

  Future<void> addProduct(Product product) async {
    //products.json is a file we want to create on firebase server
    final url = Uri.https(
        'flutter-29634-default-rtdb.firebaseio.com', '/products.json');
    try {
      final value = await http.post(
        url,
        body: json.encode({
          'title': product.title,
          'description': product.description,
          'imageUrl': product.imageUrl,
          'price': product.price,
          'isfavorite': product.isfavorite,
        }),
      );
      final newProduct = Product(
          title: product.title,
          description: product.description,
          id: json.decode(
              value.body)['name'], //using the unique key generated by firebase
          imageUrl: product.imageUrl,
          price: product.price);
      _items.add(newProduct);
    } catch (error) {
      print(error);
      throw error;
    }

    notifyListeners();
    // }).catchError((onError) {
    //   print(onError);
    //   throw onError;
    // });
  }

  Future<void> updateprod(String id, Product newProd) async {
    final prodind = _items.indexWhere((element) => element.id == id);
    final url = Uri.https(
        'flutter-29634-default-rtdb.firebaseio.com', '/products/$id.json');
    await http.patch(
      url,
      body: json.encode({
        'title': newProd.title,
        'description': newProd.description,
        'imageUrl': newProd.imageUrl,
        'price': newProd.price,
      }),
    );
    if (prodind >= 0) {
      _items[prodind] = newProd;
      notifyListeners();
    } else {
      print('..');
    }
  }

  //optimized deleting instead of just removing the product we are storing a reference to the product
  //if any error is occured we reinsert the deleted item in its place
  //web server status code
  //200  or 201=> Everything worked
  //300 => redirected
  //400 ,500=> Something went wrong
  //in case of get and post http throws an error in case of delete we move to
  //then block
  Future<void> deleteprod(String id) async {
    final url = Uri.https(
        'flutter-29634-default-rtdb.firebaseio.com', '/products/$id.json');
    final existingprodind = _items.indexWhere((element) => element.id == id);
    var existingprod = _items[existingprodind];
    _items.removeAt(existingprodind);
    notifyListeners();
    final response = await http.delete(url);
    if (response.statusCode >= 400) {
      _items.insert(existingprodind, existingprod);
      notifyListeners();
      throw HttpException("Couldn't delete product");
    } else {
      existingprod = null;
    }
  }

  Product itembyId(String id) {
    return _items.firstWhere((element) => element.id == id);
  }
}
